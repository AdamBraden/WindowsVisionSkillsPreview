// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.Graphics.DirectX.Direct3D11.2.h"
#include "winrt/impl/Windows.Graphics.Imaging.2.h"
#include "winrt/impl/Windows.Media.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.AI.Skills.SkillInterfacePreview.2.h"

namespace winrt::impl {

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkill<D>::SkillDescriptor() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkill)->get_SkillDescriptor(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkill<D>::Device() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkill)->get_Device(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkill<D>::CreateSkillBindingAsync() const
{
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding> operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkill)->CreateSkillBindingAsync(put_abi(operation)));
    return operation;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkill<D>::EvaluateAsync(Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding const& binding) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkill)->EvaluateAsync(get_abi(binding), put_abi(operation)));
    return operation;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillBinding<D>::Device() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding)->get_Device(put_abi(value)));
    return value;
}

template <typename D> winrt::guid consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::Id() const
{
    winrt::guid value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->get_Id(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::Name() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->get_Name(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::Description() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->get_Description(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::Version() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->get_Version(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::InputFeatureDescriptors() const
{
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->get_InputFeatureDescriptors(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::OutputFeatureDescriptors() const
{
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->get_OutputFeatureDescriptors(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::GetSupportedExecutionDevicesAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>> operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->GetSupportedExecutionDevicesAsync(put_abi(operation)));
    return operation;
}

template <typename D> Windows::Foundation::Collections::IMapView<hstring, hstring> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::Metadata() const
{
    Windows::Foundation::Collections::IMapView<hstring, hstring> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->get_Metadata(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::CreateSkillAsync() const
{
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill> operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->CreateSkillAsync(put_abi(operation)));
    return operation;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>::CreateSkillAsync(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& executionDevice) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill> operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor)->CreateSkillAsync2(get_abi(executionDevice), put_abi(operation)));
    return operation;
}

template <typename D> hstring consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDevice<D>::Name() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice)->get_Name(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDevice<D>::ExecutionDeviceKind() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice)->get_ExecutionDeviceKind(put_abi(value)));
    return value;
}

template <typename D> uint16_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceCPU<D>::CoreCount() const
{
    uint16_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU)->get_CoreCount(&value));
    return value;
}

template <typename D> Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX<D>::Direct3D11Device() const
{
    Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX)->get_Direct3D11Device(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX<D>::MaxSupportedFeatureLevel() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX)->get_MaxSupportedFeatureLevel(put_abi(value)));
    return value;
}

template <typename D> uint64_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX<D>::AdapterId() const
{
    uint64_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX)->get_AdapterId(&value));
    return value;
}

template <typename D> uint64_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX<D>::DedicatedVideoMemory() const
{
    uint64_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX)->get_DedicatedVideoMemory(&value));
    return value;
}

template <typename D> bool consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX<D>::IsDefault() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX)->get_IsDefault(&value));
    return value;
}

template <typename D> uint16_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX<D>::HighPerformanceIndex() const
{
    uint16_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX)->get_HighPerformanceIndex(&value));
    return value;
}

template <typename D> uint16_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX<D>::PowerSavingIndex() const
{
    uint16_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX)->get_PowerSavingIndex(&value));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature<D>::Descriptor() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature)->get_Descriptor(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature<D>::Device() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature)->get_Device(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature<D>::SetFeatureValueAsync(Windows::Foundation::IInspectable const& value) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature)->SetFeatureValueAsync(get_abi(value), put_abi(operation)));
    return operation;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature<D>::SetFeatureValueAsync(Windows::Foundation::IInspectable const& value, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const& descriptor) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature)->SetFeatureValueAsync2(get_abi(value), get_abi(descriptor), put_abi(operation)));
    return operation;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature<D>::FeatureValue() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature)->get_FeatureValue(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureDescriptor<D>::Name() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor)->get_Name(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureDescriptor<D>::Description() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor)->get_Description(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureDescriptor<D>::IsRequired() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor)->get_IsRequired(&value));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureDescriptor<D>::FeatureKind() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor)->get_FeatureKind(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureDescriptor<D>::CreateValueAsync(Windows::Foundation::IInspectable const& value, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue> operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor)->CreateValueAsync(get_abi(value), get_abi(device), put_abi(operation)));
    return operation;
}

template <typename D> int32_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor<D>::Height() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor)->get_Height(&value));
    return value;
}

template <typename D> int32_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor<D>::Width() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor)->get_Width(&value));
    return value;
}

template <typename D> int32_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor<D>::MaxDimension() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor)->get_MaxDimension(&value));
    return value;
}

template <typename D> Windows::Graphics::Imaging::BitmapPixelFormat consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor<D>::SupportedBitmapPixelFormat() const
{
    Windows::Graphics::Imaging::BitmapPixelFormat value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor)->get_SupportedBitmapPixelFormat(put_abi(value)));
    return value;
}

template <typename D> Windows::Graphics::Imaging::BitmapAlphaMode consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor<D>::SupportedBitmapAlphaMode() const
{
    Windows::Graphics::Imaging::BitmapAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor)->get_SupportedBitmapAlphaMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptorFactory<D>::CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, int32_t width, int32_t height, int32_t maxDimension, Windows::Graphics::Imaging::BitmapPixelFormat const& supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const& supportedBitmapAlphaMode) const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory)->CreateInstance(get_abi(name), get_abi(description), isRequired, width, height, maxDimension, get_abi(supportedBitmapPixelFormat), get_abi(supportedBitmapAlphaMode), put_abi(value)));
    return value;
}

template <typename D> Windows::Media::VideoFrame consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageValue<D>::VideoFrame() const
{
    Windows::Media::VideoFrame value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue)->get_VideoFrame(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptor<D>::ValueElementKind() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor)->get_ValueElementKind(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptor<D>::KeyElementKind() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor)->get_KeyElementKind(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IIterable<Windows::Foundation::IInspectable> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptor<D>::ValidKeys() const
{
    Windows::Foundation::Collections::IIterable<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor)->get_ValidKeys(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptorFactory<D>::CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& valueElementKind, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& keyElementKind, param::iterable<Windows::Foundation::IInspectable> const& validKeys) const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory)->CreateInstance(get_abi(name), get_abi(description), isRequired, get_abi(valueElementKind), get_abi(keyElementKind), get_abi(validKeys), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapValue<D>::MapView() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue)->get_MapView(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureStatics<D>::Create(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device) const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics)->Create(get_abi(descriptor), get_abi(device), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<bool> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorBooleanValue<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<bool> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptor<D>::ElementKind() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor)->get_ElementKind(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<int64_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptor<D>::Shape() const
{
    Windows::Foundation::Collections::IVectorView<int64_t> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor)->get_Shape(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptorFactory<D>::CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, param::vector_view<int64_t> const& shape, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& elementKind) const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory)->CreateInstance(get_abi(name), get_abi(description), isRequired, get_abi(shape), get_abi(elementKind), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<double> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDoubleValue<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<double> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<float> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorFloat16Value<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<float> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<float> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorFloatValue<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<float> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<int16_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt16Value<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<int16_t> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<int64_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt64Value<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<int64_t> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<uint8_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt8Value<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<uint8_t> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<int32_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorIntValue<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<int32_t> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<hstring> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorStringValue<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<hstring> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<uint16_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt16Value<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<uint16_t> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<uint32_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt32Value<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<uint32_t> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<uint64_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt64Value<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<uint64_t> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<uint8_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt8Value<D>::GetAsVectorView() const
{
    Windows::Foundation::Collections::IVectorView<uint8_t> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value)->GetAsVectorView(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<int64_t> consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorValue<D>::Shape() const
{
    Windows::Foundation::Collections::IVectorView<int64_t> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue)->get_Shape(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureValue<D>::Descriptor() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue)->get_Descriptor(put_abi(value)));
    return value;
}

template <typename D> uint16_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersion<D>::Major() const
{
    uint16_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion)->get_Major(&value));
    return value;
}

template <typename D> uint16_t consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersion<D>::Minor() const
{
    uint16_t value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion)->get_Minor(&value));
    return value;
}

template <typename D> hstring consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersion<D>::Author() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion)->get_Author(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersion<D>::Publisher() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion)->get_Publisher(put_abi(value)));
    return value;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersionStatics<D>::Create(uint16_t major, uint16_t minor, param::hstring const& author, param::hstring const& publisher) const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics)->Create(major, minor, get_abi(author), get_abi(publisher), put_abi(result)));
    return result;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelper<D>::Device() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper)->get_Device(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelper<D>::SetInputImageAsync(Windows::Media::VideoFrame const& videoFrame) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper)->SetInputImageAsync(get_abi(videoFrame), put_abi(operation)));
    return operation;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelperFactory<D>::CreateInstance(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory)->CreateInstance(get_abi(descriptor), get_abi(device), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelperOverrides<D>::SetInputImageInternalAsync(Windows::Media::VideoFrame const& videoFrame) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides)->SetInputImageInternalAsync(get_abi(videoFrame), put_abi(operation)));
    return operation;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU consume_Microsoft_AI_Skills_SkillInterfacePreview_SkillExecutionDeviceCPUStatics<D>::Create() const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics)->Create(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX> consume_Microsoft_AI_Skills_SkillInterfacePreview_SkillExecutionDeviceDirectXStatics<D>::GetAvailableDirectXExecutionDevices() const
{
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics)->GetAvailableDirectXExecutionDevices(put_abi(result)));
    return result;
}

template <typename D> Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX consume_Microsoft_AI_Skills_SkillInterfacePreview_SkillExecutionDeviceDirectXStatics<D>::Create(Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const& direct3D11Device) const
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics)->Create(get_abi(direct3D11Device), put_abi(result)));
    return result;
}

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkill> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkill>
{
    int32_t WINRT_CALL get_SkillDescriptor(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SkillDescriptor, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor>(this->shim().SkillDescriptor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateSkillBindingAsync(void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSkillBindingAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding>));
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding>>(this->shim().CreateSkillBindingAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL EvaluateAsync(void* binding, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EvaluateAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding const);
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().EvaluateAsync(*reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding const*>(&binding)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding>
{
    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor>
{
    int32_t WINRT_CALL get_Id(winrt::guid* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Id, WINRT_WRAP(winrt::guid));
            *value = detach_from<winrt::guid>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Name(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Name, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Description(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Description, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Description());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Version(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Version, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion>(this->shim().Version());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InputFeatureDescriptors(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InputFeatureDescriptors, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>>(this->shim().InputFeatureDescriptors());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OutputFeatureDescriptors(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OutputFeatureDescriptors, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>>(this->shim().OutputFeatureDescriptors());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetSupportedExecutionDevicesAsync(void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSupportedExecutionDevicesAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>>));
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>>>(this->shim().GetSupportedExecutionDevicesAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Metadata(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Metadata, WINRT_WRAP(Windows::Foundation::Collections::IMapView<hstring, hstring>));
            *value = detach_from<Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().Metadata());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateSkillAsync(void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSkillAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill>));
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill>>(this->shim().CreateSkillAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateSkillAsync2(void* executionDevice, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSkillAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill>), Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const);
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill>>(this->shim().CreateSkillAsync(*reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const*>(&executionDevice)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>
{
    int32_t WINRT_CALL get_Name(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Name, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExecutionDeviceKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExecutionDeviceKind, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind>(this->shim().ExecutionDeviceKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU>
{
    int32_t WINRT_CALL get_CoreCount(uint16_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CoreCount, WINRT_WRAP(uint16_t));
            *value = detach_from<uint16_t>(this->shim().CoreCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX>
{
    int32_t WINRT_CALL get_Direct3D11Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Direct3D11Device, WINRT_WRAP(Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice));
            *value = detach_from<Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>(this->shim().Direct3D11Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxSupportedFeatureLevel(Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSupportedFeatureLevel, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind>(this->shim().MaxSupportedFeatureLevel());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AdapterId(uint64_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AdapterId, WINRT_WRAP(uint64_t));
            *value = detach_from<uint64_t>(this->shim().AdapterId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DedicatedVideoMemory(uint64_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DedicatedVideoMemory, WINRT_WRAP(uint64_t));
            *value = detach_from<uint64_t>(this->shim().DedicatedVideoMemory());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsDefault(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsDefault, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HighPerformanceIndex(uint16_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HighPerformanceIndex, WINRT_WRAP(uint16_t));
            *value = detach_from<uint16_t>(this->shim().HighPerformanceIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PowerSavingIndex(uint16_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PowerSavingIndex, WINRT_WRAP(uint16_t));
            *value = detach_from<uint16_t>(this->shim().PowerSavingIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature>
{
    int32_t WINRT_CALL get_Descriptor(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Descriptor, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>(this->shim().Descriptor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetFeatureValueAsync(void* value, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetFeatureValueAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Windows::Foundation::IInspectable const);
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SetFeatureValueAsync(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetFeatureValueAsync2(void* value, void* descriptor, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetFeatureValueAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Windows::Foundation::IInspectable const, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const);
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SetFeatureValueAsync(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value), *reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const*>(&descriptor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FeatureValue(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FeatureValue, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue>(this->shim().FeatureValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2>
{};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>
{
    int32_t WINRT_CALL get_Name(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Name, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Description(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Description, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Description());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsRequired(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsRequired, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsRequired());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FeatureKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FeatureKind, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind>(this->shim().FeatureKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateValueAsync(void* value, void* device, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateValueAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue>), Windows::Foundation::IInspectable const, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const);
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue>>(this->shim().CreateValueAsync(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value), *reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor>
{
    int32_t WINRT_CALL get_Height(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Height, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Height());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Width(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Width, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Width());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxDimension(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxDimension, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxDimension());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SupportedBitmapPixelFormat(Windows::Graphics::Imaging::BitmapPixelFormat* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SupportedBitmapPixelFormat, WINRT_WRAP(Windows::Graphics::Imaging::BitmapPixelFormat));
            *value = detach_from<Windows::Graphics::Imaging::BitmapPixelFormat>(this->shim().SupportedBitmapPixelFormat());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SupportedBitmapAlphaMode(Windows::Graphics::Imaging::BitmapAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SupportedBitmapAlphaMode, WINRT_WRAP(Windows::Graphics::Imaging::BitmapAlphaMode));
            *value = detach_from<Windows::Graphics::Imaging::BitmapAlphaMode>(this->shim().SupportedBitmapAlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2>
{};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory>
{
    int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, int32_t width, int32_t height, int32_t maxDimension, Windows::Graphics::Imaging::BitmapPixelFormat supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode supportedBitmapAlphaMode, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor), hstring const&, hstring const&, bool, int32_t, int32_t, int32_t, Windows::Graphics::Imaging::BitmapPixelFormat const&, Windows::Graphics::Imaging::BitmapAlphaMode const&);
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&description), isRequired, width, height, maxDimension, *reinterpret_cast<Windows::Graphics::Imaging::BitmapPixelFormat const*>(&supportedBitmapPixelFormat), *reinterpret_cast<Windows::Graphics::Imaging::BitmapAlphaMode const*>(&supportedBitmapAlphaMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics>
{};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue>
{
    int32_t WINRT_CALL get_VideoFrame(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VideoFrame, WINRT_WRAP(Windows::Media::VideoFrame));
            *value = detach_from<Windows::Media::VideoFrame>(this->shim().VideoFrame());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor>
{
    int32_t WINRT_CALL get_ValueElementKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ValueElementKind, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind>(this->shim().ValueElementKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_KeyElementKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KeyElementKind, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind>(this->shim().KeyElementKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ValidKeys(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ValidKeys, WINRT_WRAP(Windows::Foundation::Collections::IIterable<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IIterable<Windows::Foundation::IInspectable>>(this->shim().ValidKeys());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2>
{};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory>
{
    int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind valueElementKind, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind keyElementKind, void* validKeys, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor), hstring const&, hstring const&, bool, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const&, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const&, Windows::Foundation::Collections::IIterable<Windows::Foundation::IInspectable> const&);
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&description), isRequired, *reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const*>(&valueElementKind), *reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const*>(&keyElementKind), *reinterpret_cast<Windows::Foundation::Collections::IIterable<Windows::Foundation::IInspectable> const*>(&validKeys)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics>
{};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue>
{
    int32_t WINRT_CALL get_MapView(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MapView, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().MapView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics>
{
    int32_t WINRT_CALL Create(void* descriptor, void* device, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature), Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const&, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const&);
            *result = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature>(this->shim().Create(*reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const*>(&descriptor), *reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<bool>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<bool>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor>
{
    int32_t WINRT_CALL get_ElementKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ElementKind, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind>(this->shim().ElementKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Shape(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Shape, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<int64_t>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<int64_t>>(this->shim().Shape());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2>
{};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory>
{
    int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, void* shape, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind elementKind, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor), hstring const&, hstring const&, bool, Windows::Foundation::Collections::IVectorView<int64_t> const&, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const&);
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&description), isRequired, *reinterpret_cast<Windows::Foundation::Collections::IVectorView<int64_t> const*>(&shape), *reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const*>(&elementKind)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics>
{};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<double>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<double>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<float>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<float>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<float>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<float>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<int16_t>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<int16_t>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<int64_t>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<int64_t>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<uint8_t>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<uint8_t>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<int32_t>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<int32_t>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<hstring>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<hstring>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<uint16_t>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<uint16_t>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<uint32_t>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<uint32_t>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<uint64_t>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<uint64_t>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value>
{
    int32_t WINRT_CALL GetAsVectorView(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAsVectorView, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<uint8_t>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<uint8_t>>(this->shim().GetAsVectorView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue>
{
    int32_t WINRT_CALL get_Shape(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Shape, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<int64_t>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<int64_t>>(this->shim().Shape());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue>
{
    int32_t WINRT_CALL get_Descriptor(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Descriptor, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>(this->shim().Descriptor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion>
{
    int32_t WINRT_CALL get_Major(uint16_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Major, WINRT_WRAP(uint16_t));
            *value = detach_from<uint16_t>(this->shim().Major());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Minor(uint16_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Minor, WINRT_WRAP(uint16_t));
            *value = detach_from<uint16_t>(this->shim().Minor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Author(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Author, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Author());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Publisher(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Publisher, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Publisher());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics>
{
    int32_t WINRT_CALL Create(uint16_t major, uint16_t minor, void* author, void* publisher, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion), uint16_t, uint16_t, hstring const&, hstring const&);
            *result = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion>(this->shim().Create(major, minor, *reinterpret_cast<hstring const*>(&author), *reinterpret_cast<hstring const*>(&publisher)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper>
{
    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice));
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetInputImageAsync(void* videoFrame, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetInputImageAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Windows::Media::VideoFrame const);
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SetInputImageAsync(*reinterpret_cast<Windows::Media::VideoFrame const*>(&videoFrame)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory>
{
    int32_t WINRT_CALL CreateInstance(void* descriptor, void* device, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper), Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor const&, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper>(this->shim().CreateInstance(*reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor const*>(&descriptor), *reinterpret_cast<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const*>(&device), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides>
{
    int32_t WINRT_CALL SetInputImageInternalAsync(void* videoFrame, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetInputImageInternalAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Windows::Media::VideoFrame const);
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SetInputImageInternalAsync(*reinterpret_cast<Windows::Media::VideoFrame const*>(&videoFrame)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics>
{
    int32_t WINRT_CALL Create(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU));
            *result = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU>(this->shim().Create());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics> : produce_base<D, Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics>
{
    int32_t WINRT_CALL GetAvailableDirectXExecutionDevices(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAvailableDirectXExecutionDevices, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX>));
            *result = detach_from<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX>>(this->shim().GetAvailableDirectXExecutionDevices());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Create(void* direct3D11Device, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX), Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const&);
            *result = detach_from<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX>(this->shim().Create(*reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const*>(&direct3D11Device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides>
{
    Windows::Foundation::IAsyncAction SetInputImageInternalAsync(Windows::Media::VideoFrame const videoFrame)
    {
        Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.SetInputImageInternalAsync(videoFrame);
        }
        return this->shim().SetInputImageInternalAsync(videoFrame);
    }
};
}

WINRT_EXPORT namespace winrt::Microsoft::AI::Skills::SkillInterfacePreview {

inline Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU SkillExecutionDeviceCPU::Create()
{
    return impl::call_factory<SkillExecutionDeviceCPU, Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics>([&](auto&& f) { return f.Create(); });
}

inline Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX> SkillExecutionDeviceDirectX::GetAvailableDirectXExecutionDevices()
{
    return impl::call_factory<SkillExecutionDeviceDirectX, Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics>([&](auto&& f) { return f.GetAvailableDirectXExecutionDevices(); });
}

inline Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX SkillExecutionDeviceDirectX::Create(Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const& direct3D11Device)
{
    return impl::call_factory<SkillExecutionDeviceDirectX, Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics>([&](auto&& f) { return f.Create(direct3D11Device); });
}

inline Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature SkillFeature::Create(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device)
{
    return impl::call_factory<SkillFeature, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics>([&](auto&& f) { return f.Create(descriptor, device); });
}

inline SkillFeatureImageDescriptor::SkillFeatureImageDescriptor(param::hstring const& name, param::hstring const& description, bool isRequired, int32_t width, int32_t height, int32_t maxDimension, Windows::Graphics::Imaging::BitmapPixelFormat const& supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const& supportedBitmapAlphaMode) :
    SkillFeatureImageDescriptor(impl::call_factory<SkillFeatureImageDescriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory>([&](auto&& f) { return f.CreateInstance(name, description, isRequired, width, height, maxDimension, supportedBitmapPixelFormat, supportedBitmapAlphaMode); }))
{}

inline SkillFeatureMapDescriptor::SkillFeatureMapDescriptor(param::hstring const& name, param::hstring const& description, bool isRequired, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& valueElementKind, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& keyElementKind, param::iterable<Windows::Foundation::IInspectable> const& validKeys) :
    SkillFeatureMapDescriptor(impl::call_factory<SkillFeatureMapDescriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory>([&](auto&& f) { return f.CreateInstance(name, description, isRequired, valueElementKind, keyElementKind, validKeys); }))
{}

inline SkillFeatureTensorDescriptor::SkillFeatureTensorDescriptor(param::hstring const& name, param::hstring const& description, bool isRequired, param::vector_view<int64_t> const& shape, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& elementKind) :
    SkillFeatureTensorDescriptor(impl::call_factory<SkillFeatureTensorDescriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory>([&](auto&& f) { return f.CreateInstance(name, description, isRequired, shape, elementKind); }))
{}

inline Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion SkillVersion::Create(uint16_t major, uint16_t minor, param::hstring const& author, param::hstring const& publisher)
{
    return impl::call_factory<SkillVersion, Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics>([&](auto&& f) { return f.Create(major, minor, author, publisher); });
}

inline VisionSkillBindingHelper::VisionSkillBindingHelper(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<VisionSkillBindingHelper, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory>([&](auto&& f) { return f.CreateInstance(descriptor, device, baseInterface, innerInterface); });
}

template <typename D> Windows::Foundation::IAsyncAction IVisionSkillBindingHelperOverridesT<D>::SetInputImageInternalAsync(Windows::Media::VideoFrame const& videoFrame) const
{
    return shim().template try_as<IVisionSkillBindingHelperOverrides>().SetInputImageInternalAsync(videoFrame);
}

template <typename D, typename... Interfaces>
struct VisionSkillBindingHelperT :
    implements<D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature>>, Windows::Foundation::Collections::IMap<hstring, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature>>,
    impl::base<D, Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper>,
    Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverridesT<D>
{
    using composable = VisionSkillBindingHelper;

protected:
    VisionSkillBindingHelperT(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device)
    {
        impl::call_factory<Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper, Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory>([&](auto&& f) { f.CreateInstance(descriptor, device, *this, this->m_inner); });
    }
};

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkill> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkill> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorBooleanValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorBooleanValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDoubleValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDoubleValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloat16Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloat16Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloatValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloatValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt16Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt16Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt64Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt64Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt8Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt8Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorIntValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorIntValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorStringValue> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorStringValue> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt16Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt16Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt32Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt32Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt64Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt64Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt8Value> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt8Value> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion> {};
template<> struct hash<winrt::Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper> {};

}
