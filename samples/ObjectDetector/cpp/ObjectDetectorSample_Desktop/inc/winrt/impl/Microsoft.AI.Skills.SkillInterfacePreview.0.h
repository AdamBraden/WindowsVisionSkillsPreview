// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

WINRT_EXPORT namespace winrt::Windows::Graphics::DirectX::Direct3D11 {

struct IDirect3DDevice;

}

WINRT_EXPORT namespace winrt::Windows::Graphics::Imaging {

enum class BitmapAlphaMode;
enum class BitmapPixelFormat;

}

WINRT_EXPORT namespace winrt::Windows::Media {

struct VideoFrame;

}

WINRT_EXPORT namespace winrt::Microsoft::AI::Skills::SkillInterfacePreview {

enum class D3DFeatureLevelKind : int32_t
{
    D3D_FEATURE_LEVEL_9_1 = 37120,
    D3D_FEATURE_LEVEL_9_2 = 37376,
    D3D_FEATURE_LEVEL_9_3 = 37632,
    D3D_FEATURE_LEVEL_10_0 = 40960,
    D3D_FEATURE_LEVEL_10_1 = 41216,
    D3D_FEATURE_LEVEL_11_0 = 45056,
    D3D_FEATURE_LEVEL_11_1 = 45312,
    D3D_FEATURE_LEVEL_12_0 = 49152,
    D3D_FEATURE_LEVEL_12_1 = 49408,
};

enum class SkillElementKind : int32_t
{
    Undefined = 0,
    Float = 1,
    Int32 = 2,
    String = 3,
    Boolean = 4,
    Int8 = 5,
    Int16 = 6,
    Int64 = 7,
    UInt8 = 8,
    UInt16 = 9,
    UInt32 = 10,
    UInt64 = 11,
    Float16 = 12,
    Double = 13,
};

enum class SkillExecutionDeviceKind : int32_t
{
    Undefined = 0,
    Cpu = 1,
    Gpu = 2,
    Vpu = 3,
    Fpga = 4,
    Cloud = 5,
};

enum class SkillFeatureKind : int32_t
{
    Undefined = 0,
    Tensor = 1,
    Map = 2,
    Image = 3,
};

struct ISkill;
struct ISkillBinding;
struct ISkillDescriptor;
struct ISkillExecutionDevice;
struct ISkillExecutionDeviceCPU;
struct ISkillExecutionDeviceDirectX;
struct ISkillFeature;
struct ISkillFeature2;
struct ISkillFeatureDescriptor;
struct ISkillFeatureImageDescriptor;
struct ISkillFeatureImageDescriptor2;
struct ISkillFeatureImageDescriptorFactory;
struct ISkillFeatureImageDescriptorStatics;
struct ISkillFeatureImageValue;
struct ISkillFeatureMapDescriptor;
struct ISkillFeatureMapDescriptor2;
struct ISkillFeatureMapDescriptorFactory;
struct ISkillFeatureMapDescriptorStatics;
struct ISkillFeatureMapValue;
struct ISkillFeatureStatics;
struct ISkillFeatureTensorBooleanValue;
struct ISkillFeatureTensorDescriptor;
struct ISkillFeatureTensorDescriptor2;
struct ISkillFeatureTensorDescriptorFactory;
struct ISkillFeatureTensorDescriptorStatics;
struct ISkillFeatureTensorDoubleValue;
struct ISkillFeatureTensorFloat16Value;
struct ISkillFeatureTensorFloatValue;
struct ISkillFeatureTensorInt16Value;
struct ISkillFeatureTensorInt64Value;
struct ISkillFeatureTensorInt8Value;
struct ISkillFeatureTensorIntValue;
struct ISkillFeatureTensorStringValue;
struct ISkillFeatureTensorUInt16Value;
struct ISkillFeatureTensorUInt32Value;
struct ISkillFeatureTensorUInt64Value;
struct ISkillFeatureTensorUInt8Value;
struct ISkillFeatureTensorValue;
struct ISkillFeatureValue;
struct ISkillVersion;
struct ISkillVersionStatics;
struct IVisionSkillBindingHelper;
struct IVisionSkillBindingHelperFactory;
struct IVisionSkillBindingHelperOverrides;
struct SkillExecutionDeviceCPUStatics;
struct SkillExecutionDeviceDirectXStatics;
struct SkillExecutionDeviceCPU;
struct SkillExecutionDeviceDirectX;
struct SkillFeature;
struct SkillFeatureImageDescriptor;
struct SkillFeatureImageValue;
struct SkillFeatureMapDescriptor;
struct SkillFeatureMapValue;
struct SkillFeatureTensorBooleanValue;
struct SkillFeatureTensorDescriptor;
struct SkillFeatureTensorDoubleValue;
struct SkillFeatureTensorFloat16Value;
struct SkillFeatureTensorFloatValue;
struct SkillFeatureTensorInt16Value;
struct SkillFeatureTensorInt64Value;
struct SkillFeatureTensorInt8Value;
struct SkillFeatureTensorIntValue;
struct SkillFeatureTensorStringValue;
struct SkillFeatureTensorUInt16Value;
struct SkillFeatureTensorUInt32Value;
struct SkillFeatureTensorUInt64Value;
struct SkillFeatureTensorUInt8Value;
struct SkillVersion;
struct VisionSkillBindingHelper;

}

namespace winrt::impl {

template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkill>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorBooleanValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDoubleValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloat16Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloatValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt16Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt64Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt8Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorIntValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorStringValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt16Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt32Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt64Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt8Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind>{ using type = enum_category; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkill>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkill" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillBinding" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillExecutionDevice" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillExecutionDeviceCPU" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillExecutionDeviceDirectX" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeature" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeature2" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureImageDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureImageDescriptor2" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureImageDescriptorFactory" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureImageDescriptorStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureImageValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureMapDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureMapDescriptor2" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureMapDescriptorFactory" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureMapDescriptorStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureMapValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorBooleanValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorDescriptor2" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorDescriptorFactory" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorDescriptorStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorDoubleValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorFloat16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorFloatValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorInt16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorInt64Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorInt8Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorIntValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorStringValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorUInt16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorUInt32Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorUInt64Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorUInt8Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureTensorValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillFeatureValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillVersion" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.ISkillVersionStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.IVisionSkillBindingHelper" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.IVisionSkillBindingHelperFactory" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.IVisionSkillBindingHelperOverrides" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillExecutionDeviceCPUStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillExecutionDeviceDirectXStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillExecutionDeviceCPU" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillExecutionDeviceDirectX" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeature" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureImageDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureImageValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureMapDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureMapValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorBooleanValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorBooleanValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDoubleValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorDoubleValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloat16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorFloat16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloatValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorFloatValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorInt16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt64Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorInt64Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt8Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorInt8Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorIntValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorIntValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorStringValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorStringValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorUInt16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt32Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorUInt32Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt64Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorUInt64Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt8Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureTensorUInt8Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillVersion" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.VisionSkillBindingHelper" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.D3DFeatureLevelKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillElementKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillExecutionDeviceKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterfacePreview.SkillFeatureKind" }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkill>{ static constexpr guid value{ 0x4135999C,0xEAB4,0x411D,{ 0xBB,0x13,0x62,0x3F,0x27,0xE3,0xD0,0x34 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding>{ static constexpr guid value{ 0xC7C8CC6D,0xF9E2,0x4137,{ 0xA9,0x4C,0x56,0x80,0x67,0xAA,0xF7,0x13 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor>{ static constexpr guid value{ 0xBA8762E6,0x4B97,0x49CF,{ 0x84,0x65,0x6A,0x81,0x17,0xA2,0xA2,0xF2 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>{ static constexpr guid value{ 0x9A6F2FBF,0x11A5,0x4AA1,{ 0x9E,0x2D,0x1C,0x37,0x83,0xA6,0x59,0x56 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU>{ static constexpr guid value{ 0xB5589A79,0x653A,0x4BC7,{ 0xA5,0xF5,0x8E,0x68,0xBA,0x1B,0x2D,0x4B } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX>{ static constexpr guid value{ 0x56C00BCF,0x0668,0x4448,{ 0x93,0xE0,0x57,0x1D,0xDE,0x34,0x61,0x56 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature>{ static constexpr guid value{ 0x681599FB,0xD5EE,0x462C,{ 0x8D,0x49,0x36,0x06,0xE4,0xF2,0x00,0x2B } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2>{ static constexpr guid value{ 0xF4BF1479,0xF8F5,0x5D9A,{ 0x92,0x4C,0xC7,0xD7,0xF5,0x4C,0x9C,0x47 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>{ static constexpr guid value{ 0xC8D5FE95,0x0144,0x4303,{ 0x9C,0xE0,0x67,0x8D,0xBC,0xC3,0x8F,0xB9 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor>{ static constexpr guid value{ 0x61612C40,0x9029,0x4026,{ 0xB2,0xCD,0xE9,0x23,0xA5,0xED,0x0E,0xC3 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2>{ static constexpr guid value{ 0xEEF9CE57,0x5860,0x594C,{ 0xBD,0xA7,0xE1,0xC8,0xBC,0x78,0x05,0xFF } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory>{ static constexpr guid value{ 0x4148F8A3,0x50D0,0x5C75,{ 0xA7,0xF5,0xFE,0x6C,0xFC,0x3A,0x50,0xE3 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics>{ static constexpr guid value{ 0x86B5B4E6,0x55D8,0x4280,{ 0xA8,0x95,0x22,0x6A,0xCE,0x36,0x9E,0x76 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue>{ static constexpr guid value{ 0x62090236,0x5624,0x4EF4,{ 0x84,0xEC,0x75,0x42,0xAC,0xFD,0x0C,0x9A } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor>{ static constexpr guid value{ 0xD78B6380,0x2745,0x46D2,{ 0x9A,0x04,0x37,0xEC,0xFD,0xE9,0x54,0x5F } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2>{ static constexpr guid value{ 0x380EBD16,0x1F98,0x5410,{ 0x8F,0x85,0x5C,0xF9,0xAB,0x81,0xE9,0x9B } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory>{ static constexpr guid value{ 0x48B48173,0x1EDC,0x50E6,{ 0xA2,0x29,0x97,0x78,0x5B,0x07,0xF5,0xE6 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics>{ static constexpr guid value{ 0x89BE4625,0xDA40,0x4C55,{ 0x8F,0x0D,0xFE,0xC2,0xFB,0xE8,0xC5,0x12 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue>{ static constexpr guid value{ 0xD72D1CFB,0x0EE5,0x40E6,{ 0xAB,0xBB,0x3B,0xC6,0x5B,0xDC,0xFF,0xD1 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics>{ static constexpr guid value{ 0xF93FAC96,0xAC15,0x4B2B,{ 0xAA,0xC1,0x68,0x24,0x9A,0x67,0xEE,0x13 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue>{ static constexpr guid value{ 0x5DC414E9,0xF535,0x4A12,{ 0xAC,0x11,0x04,0xBB,0xF6,0x7F,0xD2,0xEC } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor>{ static constexpr guid value{ 0x040FC4B2,0x4528,0x4463,{ 0xAE,0x68,0x5E,0x16,0x61,0x49,0xD7,0x6E } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2>{ static constexpr guid value{ 0x8FF55536,0x4B42,0x53A6,{ 0xA5,0x45,0xE9,0xC1,0xFC,0xDE,0x72,0x4C } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory>{ static constexpr guid value{ 0xF47DEB39,0x7F98,0x5A23,{ 0xB2,0x2A,0x6A,0xDF,0xF2,0x46,0x5C,0x51 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics>{ static constexpr guid value{ 0x88F1DAD4,0x048E,0x4869,{ 0x85,0x55,0x15,0x66,0x8C,0x33,0xD7,0xF6 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue>{ static constexpr guid value{ 0xC4657764,0x298B,0x44D9,{ 0xB6,0xB8,0xCD,0xEA,0x62,0x97,0x93,0xC1 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value>{ static constexpr guid value{ 0x15D169A1,0x6B38,0x4220,{ 0x90,0x25,0xC0,0xC6,0x20,0x38,0x16,0x4A } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue>{ static constexpr guid value{ 0x0D15AC02,0x8C3A,0x463D,{ 0xBB,0xF7,0xBB,0xDC,0xBC,0x6E,0x0B,0xDE } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value>{ static constexpr guid value{ 0x4AF6F069,0x5E86,0x448D,{ 0x82,0xC5,0xE2,0xCC,0x8D,0x7F,0x4E,0xE1 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value>{ static constexpr guid value{ 0x80995D0C,0xBE20,0x4CB3,{ 0xA3,0x72,0xCA,0xFE,0x31,0xBB,0xEE,0xC6 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value>{ static constexpr guid value{ 0x32613B99,0xCB68,0x43D0,{ 0x85,0x83,0x6C,0x5A,0x95,0x3A,0x4A,0xAA } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue>{ static constexpr guid value{ 0x7FF4E0CA,0x58C6,0x4714,{ 0x8C,0x35,0xC5,0xC5,0x1A,0x42,0xBF,0x40 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue>{ static constexpr guid value{ 0x7C244471,0xC624,0x474C,{ 0x8F,0x82,0xE8,0xE7,0xA1,0xEC,0x19,0x29 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value>{ static constexpr guid value{ 0xF18A299D,0xBA61,0x4E7E,{ 0xAB,0x1E,0x8A,0xFE,0x8E,0xAE,0x7A,0x7B } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value>{ static constexpr guid value{ 0x5BDB4867,0xB32D,0x4718,{ 0x86,0x92,0x9A,0x05,0x4A,0x94,0xCD,0xF4 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value>{ static constexpr guid value{ 0x48D61C28,0x1B90,0x4363,{ 0x8A,0x64,0x0D,0x53,0xF0,0xFF,0x7B,0x79 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value>{ static constexpr guid value{ 0x43E10B0F,0x69F2,0x4BF5,{ 0x81,0xA4,0x73,0xC6,0x4D,0x67,0x44,0x1A } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue>{ static constexpr guid value{ 0x4E2706AF,0x643E,0x4D05,{ 0x9A,0x10,0x4E,0x0F,0x44,0xDD,0x56,0xC5 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue>{ static constexpr guid value{ 0x81B32B08,0x7FFC,0x487F,{ 0x9C,0x8E,0xED,0xCD,0xA5,0xAB,0x9F,0x07 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion>{ static constexpr guid value{ 0x2B5031AD,0xE24C,0x4AB3,{ 0x9B,0x8E,0x54,0xB5,0xB9,0xD6,0x98,0x83 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics>{ static constexpr guid value{ 0xF72A8F77,0xA091,0x49B6,{ 0xA1,0x4D,0x2F,0x21,0x6B,0x82,0x6C,0x70 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper>{ static constexpr guid value{ 0xFFC0BE33,0x14CB,0x4F95,{ 0x8F,0x0A,0xC8,0xB6,0x6E,0xC2,0x59,0x72 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory>{ static constexpr guid value{ 0x281DDE6E,0x86DD,0x58FC,{ 0x90,0xFC,0xAD,0x32,0x4D,0x26,0x8E,0x97 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides>{ static constexpr guid value{ 0x57F82B6E,0x66F4,0x568E,{ 0x86,0x71,0xF5,0x85,0xAB,0x0C,0xCA,0x27 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics>{ static constexpr guid value{ 0xC2F92D14,0xEDC7,0x4DFA,{ 0x9C,0x01,0x43,0xC8,0x5B,0xDD,0xB4,0x55 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics>{ static constexpr guid value{ 0x302D442C,0x2DE4,0x4C63,{ 0x9C,0xFD,0xE1,0x59,0xB6,0x91,0xC7,0x4B } }; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageValue>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapValue>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorBooleanValue>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDoubleValue>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloat16Value>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorFloatValue>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt16Value>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt64Value>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorInt8Value>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorIntValue>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorStringValue>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt16Value>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt32Value>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt64Value>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorUInt8Value>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper>{ using type = Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper; };

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkill>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_SkillDescriptor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Device(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL CreateSkillBindingAsync(void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL EvaluateAsync(void* binding, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Device(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Id(winrt::guid* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Name(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Description(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Version(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_InputFeatureDescriptors(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OutputFeatureDescriptors(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL GetSupportedExecutionDevicesAsync(void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL get_Metadata(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL CreateSkillAsync(void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL CreateSkillAsync2(void* executionDevice, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Name(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExecutionDeviceKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_CoreCount(uint16_t* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Direct3D11Device(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxSupportedFeatureLevel(Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AdapterId(uint64_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DedicatedVideoMemory(uint64_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsDefault(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HighPerformanceIndex(uint16_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PowerSavingIndex(uint16_t* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Descriptor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Device(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL SetFeatureValueAsync(void* value, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL SetFeatureValueAsync2(void* value, void* descriptor, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL get_FeatureValue(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Name(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Description(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsRequired(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FeatureKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL CreateValueAsync(void* value, void* device, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Height(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Width(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxDimension(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SupportedBitmapPixelFormat(Windows::Graphics::Imaging::BitmapPixelFormat* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SupportedBitmapAlphaMode(Windows::Graphics::Imaging::BitmapAlphaMode* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, int32_t width, int32_t height, int32_t maxDimension, Windows::Graphics::Imaging::BitmapPixelFormat supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode supportedBitmapAlphaMode, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_VideoFrame(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ValueElementKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_KeyElementKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ValidKeys(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind valueElementKind, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind keyElementKind, void* validKeys, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_MapView(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL Create(void* descriptor, void* device, void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ElementKind(Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Shape(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, void* shape, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind elementKind, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Shape(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Descriptor(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Major(uint16_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Minor(uint16_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Author(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Publisher(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL Create(uint16_t major, uint16_t minor, void* author, void* publisher, void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Device(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL SetInputImageAsync(void* videoFrame, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* descriptor, void* device, void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL SetInputImageInternalAsync(void* videoFrame, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL Create(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAvailableDirectXExecutionDevices(void** result) noexcept = 0;
    virtual int32_t WINRT_CALL Create(void* direct3D11Device, void** result) noexcept = 0;
};};

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkill
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor SkillDescriptor() const;
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice Device() const;
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding> CreateSkillBindingAsync() const;
    Windows::Foundation::IAsyncAction EvaluateAsync(Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding const& binding) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkill> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkill<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillBinding
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice Device() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillBinding> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillBinding<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor
{
    winrt::guid Id() const;
    hstring Name() const;
    hstring Description() const;
    Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion Version() const;
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> InputFeatureDescriptors() const;
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> OutputFeatureDescriptors() const;
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice>> GetSupportedExecutionDevicesAsync() const;
    Windows::Foundation::Collections::IMapView<hstring, hstring> Metadata() const;
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill> CreateSkillAsync() const;
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkill> CreateSkillAsync(Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& executionDevice) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDevice
{
    hstring Name() const;
    Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceKind ExecutionDeviceKind() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDevice<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceCPU
{
    uint16_t CoreCount() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceCPU> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceCPU<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX
{
    Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice Direct3D11Device() const;
    Microsoft::AI::Skills::SkillInterfacePreview::D3DFeatureLevelKind MaxSupportedFeatureLevel() const;
    uint64_t AdapterId() const;
    uint64_t DedicatedVideoMemory() const;
    bool IsDefault() const;
    uint16_t HighPerformanceIndex() const;
    uint16_t PowerSavingIndex() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDeviceDirectX> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillExecutionDeviceDirectX<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor Descriptor() const;
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice Device() const;
    Windows::Foundation::IAsyncAction SetFeatureValueAsync(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::IAsyncAction SetFeatureValueAsync(Windows::Foundation::IInspectable const& value, Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const& descriptor) const;
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue FeatureValue() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature2
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeature2> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeature2<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureDescriptor
{
    hstring Name() const;
    hstring Description() const;
    bool IsRequired() const;
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureKind FeatureKind() const;
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue> CreateValueAsync(Windows::Foundation::IInspectable const& value, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor
{
    int32_t Height() const;
    int32_t Width() const;
    int32_t MaxDimension() const;
    Windows::Graphics::Imaging::BitmapPixelFormat SupportedBitmapPixelFormat() const;
    Windows::Graphics::Imaging::BitmapAlphaMode SupportedBitmapAlphaMode() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor2
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptor2> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptor2<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptorFactory
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureImageDescriptor CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, int32_t width, int32_t height, int32_t maxDimension, Windows::Graphics::Imaging::BitmapPixelFormat const& supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const& supportedBitmapAlphaMode) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorFactory> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptorFactory<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptorStatics
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageDescriptorStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageDescriptorStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageValue
{
    Windows::Media::VideoFrame VideoFrame() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureImageValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureImageValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptor
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind ValueElementKind() const;
    Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind KeyElementKind() const;
    Windows::Foundation::Collections::IIterable<Windows::Foundation::IInspectable> ValidKeys() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptor2
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptor2> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptor2<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptorFactory
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureMapDescriptor CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& valueElementKind, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& keyElementKind, param::iterable<Windows::Foundation::IInspectable> const& validKeys) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorFactory> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptorFactory<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptorStatics
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapDescriptorStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapDescriptorStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapValue
{
    Windows::Foundation::IInspectable MapView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureMapValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureMapValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureStatics
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeature Create(Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorBooleanValue
{
    Windows::Foundation::Collections::IVectorView<bool> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorBooleanValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorBooleanValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptor
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind ElementKind() const;
    Windows::Foundation::Collections::IVectorView<int64_t> Shape() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptor2
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptor2> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptor2<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptorFactory
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillFeatureTensorDescriptor CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, param::vector_view<int64_t> const& shape, Microsoft::AI::Skills::SkillInterfacePreview::SkillElementKind const& elementKind) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorFactory> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptorFactory<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptorStatics
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDescriptorStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDescriptorStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDoubleValue
{
    Windows::Foundation::Collections::IVectorView<double> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorDoubleValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorDoubleValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorFloat16Value
{
    Windows::Foundation::Collections::IVectorView<float> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloat16Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorFloat16Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorFloatValue
{
    Windows::Foundation::Collections::IVectorView<float> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorFloatValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorFloatValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt16Value
{
    Windows::Foundation::Collections::IVectorView<int16_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt16Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt16Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt64Value
{
    Windows::Foundation::Collections::IVectorView<int64_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt64Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt64Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt8Value
{
    Windows::Foundation::Collections::IVectorView<uint8_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorInt8Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorInt8Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorIntValue
{
    Windows::Foundation::Collections::IVectorView<int32_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorIntValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorIntValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorStringValue
{
    Windows::Foundation::Collections::IVectorView<hstring> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorStringValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorStringValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt16Value
{
    Windows::Foundation::Collections::IVectorView<uint16_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt16Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt16Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt32Value
{
    Windows::Foundation::Collections::IVectorView<uint32_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt32Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt32Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt64Value
{
    Windows::Foundation::Collections::IVectorView<uint64_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt64Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt64Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt8Value
{
    Windows::Foundation::Collections::IVectorView<uint8_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorUInt8Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorUInt8Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorValue
{
    Windows::Foundation::Collections::IVectorView<int64_t> Shape() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureTensorValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureTensorValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureValue
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureDescriptor Descriptor() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillFeatureValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillFeatureValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersion
{
    uint16_t Major() const;
    uint16_t Minor() const;
    hstring Author() const;
    hstring Publisher() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersion> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersion<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersionStatics
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillVersion Create(uint16_t major, uint16_t minor, param::hstring const& author, param::hstring const& publisher) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::ISkillVersionStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_ISkillVersionStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelper
{
    Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice Device() const;
    Windows::Foundation::IAsyncAction SetInputImageAsync(Windows::Media::VideoFrame const& videoFrame) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelper> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelper<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelperFactory
{
    Microsoft::AI::Skills::SkillInterfacePreview::VisionSkillBindingHelper CreateInstance(Microsoft::AI::Skills::SkillInterfacePreview::ISkillDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterfacePreview::ISkillExecutionDevice const& device, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperFactory> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelperFactory<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelperOverrides
{
    Windows::Foundation::IAsyncAction SetInputImageInternalAsync(Windows::Media::VideoFrame const& videoFrame) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::IVisionSkillBindingHelperOverrides> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_IVisionSkillBindingHelperOverrides<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_SkillExecutionDeviceCPUStatics
{
    Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPU Create() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceCPUStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_SkillExecutionDeviceCPUStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterfacePreview_SkillExecutionDeviceDirectXStatics
{
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX> GetAvailableDirectXExecutionDevices() const;
    Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectX Create(Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const& direct3D11Device) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterfacePreview::SkillExecutionDeviceDirectXStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterfacePreview_SkillExecutionDeviceDirectXStatics<D>; };

}
